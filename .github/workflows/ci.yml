name: Media SDK CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly regression tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

jobs:
  # Quality checks and linting
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd packages/media-sdk && npm ci
          cd apps/bun-runtime && npm ci

      - name: Run TypeScript compilation
        run: |
          cd packages/media-sdk && npm run build
          
      - name: Run linting
        run: |
          cd packages/media-sdk && npm run lint
          cd apps/bun-runtime && npm run lint

      - name: Check formatting
        run: |
          cd packages/media-sdk && npm run format:check
          cd apps/bun-runtime && npm run format:check

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        environment: [development, ci]
        include:
          - environment: development
            parallel: true
            concurrency: 2
            timeout: 300
          - environment: ci
            parallel: true
            concurrency: 4
            timeout: 180
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release
          github-token: ${{ github.server_url == 'https://github.com' && github.token || '' }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          cd packages/media-sdk && bun install
          cd apps/bun-runtime && bun install

      - name: Build packages
        run: |
          cd packages/media-sdk && bun run build

      - name: Initialize test data
        run: |
          cd apps/bun-runtime
          bun src/test-cli.ts validate --env ${{ matrix.environment }}

      - name: Run test suite
        id: test_run
        run: |
          cd apps/bun-runtime
          bun src/test-cli.ts run \
            --env ${{ matrix.environment }} \
            --parallel ${{ matrix.parallel }} \
            --concurrency ${{ matrix.concurrency }} \
            --timeout ${{ matrix.timeout }} \
            --output ci-results-${{ matrix.environment }} \
            --verbose false
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.environment }}
          path: apps/bun-runtime/ci-results-${{ matrix.environment }}/
          retention-days: 30

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-videos-${{ matrix.environment }}
          path: apps/bun-runtime/test-results/
          retention-days: 7

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './apps/bun-runtime/ci-results-${{ matrix.environment }}/report.json';
            
            if (fs.existsSync(path)) {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));
              
              const body = `## Test Results - ${{ matrix.environment }} Environment
              
              **Summary:**
              - ‚úÖ Passed: ${report.summary.passed}
              - ‚ùå Failed: ${report.summary.failed}
              - üìä Pass Rate: ${Math.round(report.summary.passRate * 100)}%
              - ‚è±Ô∏è Execution Time: ${report.totalTime}ms
              - üéØ Quality Score: ${Math.round(report.quality.averageScore * 100)}%
              
              **Performance:**
              - Average execution: ${Math.round(report.performance.averageExecutionTime)}ms
              - Peak memory: ${Math.round(report.performance.memoryPeakUsage / 1024 / 1024)}MB
              
              [View detailed HTML report](../actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

      - name: Fail if tests failed
        if: steps.test_run.outcome == 'failure'
        run: exit 1

  # Performance benchmarking
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          cd packages/media-sdk && bun install
          cd apps/bun-runtime && bun install

      - name: Build packages
        run: |
          cd packages/media-sdk && bun run build

      - name: Run benchmarks
        run: |
          cd apps/bun-runtime
          bun src/test-cli.ts benchmark \
            --platforms tiktok,youtube,instagram \
            --iterations 3 \
            --output benchmark-results

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: apps/bun-runtime/benchmark-results/
          retention-days: 90

      - name: Store benchmark data
        uses: benchmark-action/github-action-benchmark@v1
        if: github.ref == 'refs/heads/main'
        with:
          tool: 'customSmallerIsBetter'
          output-file-path: apps/bun-runtime/benchmark-results/benchmark-report.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '150%'
          fail-on-alert: false

  # Regression testing (nightly)
  regression:
    name: Regression Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          cd packages/media-sdk && bun install
          cd apps/bun-runtime && bun install

      - name: Build packages
        run: |
          cd packages/media-sdk && bun run build

      - name: Download previous results
        uses: actions/download-artifact@v4
        with:
          name: regression-baseline
          path: apps/bun-runtime/regression-baseline/
        continue-on-error: true

      - name: Run regression tests
        run: |
          cd apps/bun-runtime
          bun src/test-cli.ts run \
            --env regression \
            --parallel true \
            --concurrency 6 \
            --categories regression,stability,performance \
            --output regression-results

      - name: Analyze regression
        run: |
          cd apps/bun-runtime
          node -e "
            const fs = require('fs');
            const current = JSON.parse(fs.readFileSync('regression-results/report.json'));
            
            let baseline;
            try {
              baseline = JSON.parse(fs.readFileSync('regression-baseline/report.json'));
            } catch (e) {
              console.log('No baseline found, creating initial baseline');
              process.exit(0);
            }
            
            const qualityChange = current.quality.averageScore - baseline.quality.averageScore;
            const performanceChange = current.performance.averageExecutionTime - baseline.performance.averageExecutionTime;
            
            console.log('Regression Analysis:');
            console.log('Quality change:', qualityChange);
            console.log('Performance change:', performanceChange);
            
            if (qualityChange < -0.1 || performanceChange > 5000) {
              console.log('‚ùå Significant regression detected!');
              process.exit(1);
            } else {
              console.log('‚úÖ No significant regression detected');
            }
          "

      - name: Upload regression results
        uses: actions/upload-artifact@v4
        with:
          name: regression-baseline
          path: apps/bun-runtime/regression-results/
          retention-days: 365

      - name: Create regression issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Regression Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `# Regression Test Failure
              
              Nightly regression testing has detected a significant performance or quality regression.
              
              **Details:**
              - Build: ${{ github.sha }}
              - Run: ${{ github.run_id }}
              - Environment: regression
              
              Please review the test results and investigate potential causes.
              
              [View test results](../actions/runs/${{ github.run_id }})`,
              labels: ['regression', 'critical', 'automated']
            });

  # Production health checks
  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          cd packages/media-sdk && bun install
          cd apps/bun-runtime && bun install

      - name: Build packages
        run: |
          cd packages/media-sdk && bun run build

      - name: Run health checks
        run: |
          cd apps/bun-runtime
          bun src/test-cli.ts health

      - name: Run production validation
        run: |
          cd apps/bun-runtime
          bun src/test-cli.ts run \
            --env production \
            --parallel false \
            --concurrency 1 \
            --categories stability \
            --output production-health

      - name: Upload health check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-health
          path: apps/bun-runtime/production-health/
          retention-days: 30

  # Release workflow
  release:
    name: Release Package
    runs-on: ubuntu-latest
    needs: [quality, test, benchmark]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          cd packages/media-sdk && npm ci

      - name: Build package
        run: |
          cd packages/media-sdk && npm run build

      - name: Run final tests
        run: |
          cd packages/media-sdk && npm test

      - name: Bump version
        id: version
        run: |
          cd packages/media-sdk
          VERSION=$(npm version patch --no-git-tag-version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          cd packages/media-sdk
          echo "## ${{ steps.version.outputs.version }} - $(date +%Y-%m-%d)" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          echo "- Released from commit ${{ github.sha }}" >> CHANGELOG.tmp
          echo "- CI/CD pipeline run: ${{ github.run_id }}" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          cat CHANGELOG.md >> CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "üöÄ Release ${{ steps.version.outputs.version }}"
          git tag ${{ steps.version.outputs.version }}

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true

      - name: Publish to NPM
        run: |
          cd packages/media-sdk
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in ${{ steps.version.outputs.version }}
            
            Automated release from commit ${{ github.sha }}
            
            ### Test Results
            - All CI tests passed
            - Performance benchmarks within acceptable range
            - Regression tests passed
            
            ### Artifacts
            Download test results and benchmarks from the [CI run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          draft: false
          prerelease: false

  # Cleanup old artifacts
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30); // Keep 30 days
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate && !artifact.name.includes('regression-baseline')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }